//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

enum IntegrationType {
  jira
  linear
  slack
  discord
  github
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                   String             @id() @default(uuid())
  name                 String?
  email                String?            @unique()
  pictureUrl           String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation      String?
  stripeCustomerId     String?
  status               UserStatus         @default(VERIFIED)
  globalRole           String             @default("USER")
  /// @password
  /// @omit
  password             String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt()
  organizationRoles    OrganizationRole[]
  testsAsCreatedBy     Test[]             @relation("createdBy")
  testRunsAsExecutedBy TestRun[]          @relation("executedBy")
  testShares           TestShare[]        @relation("user")
}

/// @@allow('all', true)
model Project {
  id             String        @id() @default(uuid())
  name           String
  description    String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  tests          Test[]        @relation("project")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
  cookies        Json?         @default("{}")
  session        Json?         @default("{}")
  localStorage   Json?         @default("{}")
}

/// @@allow('all', true)
model Test {
  id                   String      @id() @default(uuid())
  name                 String
  description          String?
  url                  String?
  naturalLanguageInput String?
  status               String
  isActive             Boolean     @default(true)
  projectId            String
  project              Project?    @relation(fields: [projectId], references: [id], name: "project")
  createdById          String
  createdBy            User?       @relation(fields: [createdById], references: [id], name: "createdBy")
  testRuns             TestRun[]   @relation("test")
  testShares           TestShare[] @relation("test")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TestRun {
  id           String     @id() @default(uuid())
  status       String
  errorLog     String?
  reportUrl    String?
  testId       String
  test         Test?      @relation(fields: [testId], references: [id], name: "test", onDelete: Cascade)
  executedById String
  executedBy   User?      @relation(fields: [executedById], references: [id], name: "executedBy")
  testSteps    TestStep[] @relation("testRun")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TestStep {
  id            String   @id() @default(uuid())
  order         Float
  action        String
  status        String
  screenshotUrl String?
  testRunId     String
  testRun       TestRun? @relation(fields: [testRunId], references: [id], name: "testRun", onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TestShare {
  id         String   @id() @default(uuid())
  permission String
  testId     String
  test       Test?    @relation(fields: [testId], references: [id], name: "test", onDelete: Cascade)
  userId     String
  user       User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  projects         Project[]          @relation("organization")
  agentCredentials Agent[]            @relation("organization")
  integration      Integration[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
model Agent {
  id                 String       @id() @default(uuid())
  provider           String
  modelType          String
  numAgents          Int          @default(0)
  isActive           Boolean      @default(true)
  anthropicApiKey    String?
  awsAccessKeyId     String?
  awsSecretAccessKey String?
  awsSessionToken    String?
  awsRegion          String?
  apiEndpoint        String?
  apiKey             String?
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', organization.roles?[user == auth()])
model Integration {
  id             String          @id() @default(uuid())
  type           IntegrationType @map("integration_type")
  name           String
  config         Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
}
